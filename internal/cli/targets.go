/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/

package cli

import "slices"

const (
	TargetAccess          string = "access"
	TargetAccount         string = "account"
	TargetAccounts        string = "accounts"
	TargetAlias           string = "alias"
	TargetAliases         string = "aliases"
	TargetBlockedAccounts string = "blocked-accounts"
	TargetBookmarks       string = "bookmarks"
	TargetConfig          string = "config"
	TargetFavourites      string = "favourites"
	TargetFollowRequest   string = "follow-request"
	TargetFollowRequests  string = "follow-requests"
	TargetFollowers       string = "followers"
	TargetFollowings      string = "followings"
	TargetInstance        string = "instance"
	TargetList            string = "list"
	TargetLists           string = "lists"
	TargetMedia           string = "media"
	TargetMediaAttachment string = "media-attachment"
	TargetMutedAccounts   string = "muted-accounts"
	TargetNote            string = "note"
	TargetNotification    string = "notification"
	TargetNotifications   string = "notifications"
	TargetServer          string = "server"
	TargetStatus          string = "status"
	TargetTag             string = "tag"
	TargetTags            string = "tags"
	TargetThread          string = "thread"
	TargetTimeline        string = "timeline"
	TargetToken           string = "token"
	TargetTokens          string = "tokens"
	TargetUsage           string = "usage"
	TargetVersion         string = "version"
	TargetVotes           string = "votes"
)

// TargetDesc returns the target's description.
func TargetDesc(target string) (string, bool) {
	desc, ok := targetDescMap()[target]

	return desc, ok
}

// targetDescMap returns a map of the targets and their
// descriptions.
func TargetDescMap() map[string]string {
	return targetDescMap()
}

func targetDescMap() map[string]string {
	return map[string]string{
		TargetAccess:          "your access to your GoToSocial instance",
		TargetAccount:         "a local or remote account",
		TargetAccounts:        "one or accounts",
		TargetAlias:           "the shortname to a set of arguments",
		TargetAliases:         "the list of your aliases",
		TargetBlockedAccounts: "the accounts that are blocked by you",
		TargetBookmarks:       "the statuses that you've bookmarked",
		TargetConfig:          "your configuration",
		TargetFavourites:      "the statuses that you've favourited (liked)",
		TargetFollowRequest:   "the account that is requesting to follow you",
		TargetFollowRequests:  "the list of accounts that are requesting to follow you",
		TargetFollowers:       "the accounts who are following the specified account",
		TargetFollowings:      "the accounts who the specified account is following",
		TargetInstance:        "the GoToSocial instance",
		TargetList:            "a single list",
		TargetLists:           "one or more lists",
		TargetMedia:           "the media attached to the specified status",
		TargetMediaAttachment: "a media attachment that you own",
		TargetMutedAccounts:   "the accounts that are muted by you",
		TargetNote:            "your private note about an account",
		TargetNotification:    "a single notification",
		TargetNotifications:   "multiple notifications",
		TargetServer:          "the server mode",
		TargetStatus:          "a single status",
		TargetTag:             "a single tag (hashtag)",
		TargetTags:            "multiple tags (hashtags)",
		TargetThread:          "a status thread",
		TargetTimeline:        "your timeline",
		TargetToken:           "details of an application token",
		TargetTokens:          "a list of your tokens",
		TargetUsage:           "the usage documentation",
		TargetVersion:         "the application's build information",
		TargetVotes:           "the votes(s) to the poll in a status",
	}
}

// TargetActions returns a map of the actions and the
// descriptions of their associated targets.
func TargetActions(target string) map[string]string {
	actions := targetActionsMap()[target]
	descriptions := actionDescMap()

	output := make(map[string]string)

	for _, action := range slices.All(actions) {
		output[action] = descriptions[action]
	}

	return output
}

// targetActionsMap returns a map of the targets and the
// lists of all actions associated with those targets.
func targetActionsMap() map[string][]string {
	return map[string][]string{
		TargetAccess: {
			ActionCreate,
			ActionSwitch,
			ActionVerify,
		},
		TargetAccount: {
			ActionBlock,
			ActionFind,
			ActionFollow,
			ActionMute,
			ActionShow,
			ActionUnblock,
			ActionUnfollow,
			ActionUnmute,
		},
		TargetAccounts: {
			ActionAdd,
			ActionRemove,
		},
		TargetAlias: {
			ActionCreate,
			ActionDelete,
			ActionEdit,
			ActionRename,
		},
		TargetAliases: {
			ActionShow,
		},
		TargetBlockedAccounts: {
			ActionShow,
		},
		TargetBookmarks: {
			ActionShow,
		},
		TargetConfig: {
			ActionCreate,
		},
		TargetFavourites: {
			ActionShow,
		},
		TargetFollowRequest: {
			ActionAccept,
			ActionReject,
		},
		TargetFollowRequests: {
			ActionShow,
		},
		TargetFollowers: {
			ActionShow,
		},
		TargetFollowings: {
			ActionShow,
		},
		TargetInstance: {
			ActionShow,
		},
		TargetList: {
			ActionCreate,
			ActionDelete,
			ActionEdit,
			ActionShow,
		},
		TargetLists: {
			ActionShow,
		},
		TargetMedia: {
			ActionShow,
		},
		TargetMediaAttachment: {
			ActionCreate,
			ActionEdit,
			ActionShow,
		},
		TargetMutedAccounts: {
			ActionShow,
		},
		TargetNote: {
			ActionAdd,
			ActionRemove,
		},
		TargetNotification: {
			ActionShow,
		},
		TargetNotifications: {
			ActionClear,
			ActionShow,
		},
		TargetServer: {
			ActionStart,
		},
		TargetStatus: {
			ActionAdd,
			ActionCreate,
			ActionDelete,
			ActionFavourite,
			ActionFind,
			ActionMute,
			ActionReblog,
			ActionRemove,
			ActionShow,
			ActionUnfavourite,
			ActionUnmute,
			ActionUnreblog,
		},
		TargetTag: {
			ActionFind,
			ActionFollow,
			ActionShow,
			ActionUnfollow,
		},
		TargetTags: {
			ActionShow,
		},
		TargetThread: {
			ActionShow,
		},
		TargetTimeline: {
			ActionShow,
		},
		TargetToken: {
			ActionInvalidate,
			ActionShow,
		},
		TargetTokens: {
			ActionShow,
		},
		TargetUsage: {
			ActionShow,
		},
		TargetVersion: {
			ActionShow,
		},
		TargetVotes: {
			ActionAdd,
		},
	}
}

// TargetActionPreposition returns the preposition word used to
// relate the focused target to another target.
func TargetActionPreposition(target, action string) string {
	return targetActionPrepositionMap()[target+"-"+action]
}

func targetActionPrepositionMap() map[string]string {
	return map[string]string{
		TargetAccess + "-" + ActionSwitch:   "to",
		TargetAccounts + "-" + ActionAdd:    "to",
		TargetAccounts + "-" + ActionRemove: "from",
		TargetFollowers + "-" + ActionShow:  "from",
		TargetFollowings + "-" + ActionShow: "from",
		TargetMedia + "-" + ActionShow:      "from",
		TargetNote + "-" + ActionAdd:        "to",
		TargetNote + "-" + ActionRemove:     "from",
		TargetStatus + "-" + ActionAdd:      "to",
		TargetStatus + "-" + ActionRemove:   "from",
		TargetThread + "-" + ActionShow:     "from",
		TargetVotes + "-" + ActionAdd:       "to",
	}
}
