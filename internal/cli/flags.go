/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/

package cli

import "slices"

const (
	flagConfigDir string = "config-dir"
	flagNoColor   string = "no-color"
)

// TopLevelFlagsUsageMap returns a map of the top-level flags
// and their respective descriptions.
func TopLevelFlagsUsageMap() map[string]string {
	return map[string]string{
		flagConfigDir: "the path to the configuration directory",
		flagNoColor:   "disables the ANSI colour output when displaying the text on screen",
	}
}

const (
	flagAccountName               string = "account-name"
	flagAction                    string = "action"
	flagAddPoll                   string = "add-poll"
	flagAllAudio                  string = "all-audio"
	flagAllImages                 string = "all-images"
	flagAllVideos                 string = "all-videos"
	flagAttachmentId              string = "attachment-id"
	flagBrowser                   string = "browser"
	flagContent                   string = "content"
	flagContentType               string = "content-type"
	flagDuration                  string = "duration"
	flagExcludeNotificationType   string = "exclude-notification-type"
	flagExcludeReblogs            string = "exclude-reblogs"
	flagExcludeReplies            string = "exclude-replies"
	flagExclusive                 string = "exclusive"
	flagFull                      string = "full"
	flagInReplyTo                 string = "in-reply-to"
	flagIncludeNotificationType   string = "include-notification-type"
	flagLanguage                  string = "language"
	flagLimit                     string = "limit"
	flagListId                    string = "list-id"
	flagLocalOnly                 string = "local-only"
	flagMaxStatuses               string = "max-statuses"
	flagMediaDescription          string = "media-description"
	flagMediaFile                 string = "media-file"
	flagMediaFocus                string = "media-focus"
	flagMuteNotifications         string = "mute-notifications"
	flagMyAccount                 string = "my-account"
	flagNotBoostable              string = "not-boostable"
	flagNotLikeable               string = "not-likeable"
	flagNotReplyable              string = "not-replyable"
	flagNotificationId            string = "notification-id"
	flagNotify                    string = "notify"
	flagOnlyMedia                 string = "only-media"
	flagOnlyPinned                string = "only-pinned"
	flagOnlyPublic                string = "only-public"
	flagPollAllowsMultipleChoices string = "poll-allows-multiple-choices"
	flagPollExpiresIn             string = "poll-expires-in"
	flagPollHidesVoteCounts       string = "poll-hides-vote-counts"
	flagPollOption                string = "poll-option"
	flagQuery                     string = "query"
	flagRepliesPolicy             string = "replies-policy"
	flagResolve                   string = "resolve"
	flagRestrictToFollowing       string = "restrict-to-following"
	flagSaveText                  string = "save-text"
	flagScope                     string = "scope"
	flagSensitive                 string = "sensitive"
	flagShowReblogs               string = "show-reblogs"
	flagShowStatuses              string = "show-statuses"
	flagShowWhoFavourited         string = "show-who-favourited"
	flagShowWhoReblogged          string = "show-who-reblogged"
	flagSkipAccountRelationship   string = "skip-account-relationship"
	flagSkipUserPreferences       string = "skip-user-preferences"
	flagStatusId                  string = "status-id"
	flagSummary                   string = "summary"
	flagTagName                   string = "tag-name"
	flagTarget                    string = "target"
	flagTimelineCategory          string = "timeline-category"
	flagTitle                     string = "title"
	flagUrl                       string = "url"
	flagVisibility                string = "visibility"
	flagVote                      string = "vote"
	flagWithoutIdleTimeout        string = "without-idle-timeout"
)

// flagUsageMap returns a map of the flags
// and their respective descriptions.
func flagUsageMap() map[string]string {
	return map[string]string{
		flagAccountName:               "the name of the account to {action}",
		flagAction:                    "the name of the action",
		flagAddPoll:                   "add a poll to the new status",
		flagAllAudio:                  "play all audio files from the status",
		flagAllImages:                 "show all image files from the status",
		flagAllVideos:                 "play all video files from the status",
		flagAttachmentId:              "the ID of the media attachment",
		flagBrowser:                   "{action} the {target} in your favourite browser",
		flagContent:                   "the content of the {target}",
		flagContentType:               "the type that the contents should be parsed from",
		flagDuration:                  "how long the effect should last for (set to 0s to last indefinitely)",
		flagExcludeNotificationType:   "the type of notifications to exclude from the list",
		flagExcludeReblogs:            "exclude statuses that are reblogs (boosts) of other statuses",
		flagExcludeReplies:            "exclude statuses that are replies to other statuses",
		flagExclusive:                 "hide posts from members of this list from your home timeline",
		flagFull:                      "print the application's full build information",
		flagInReplyTo:                 "the ID of the status that you want to reply to",
		flagIncludeNotificationType:   "the type of notifications to include in the list",
		flagLanguage:                  "the ISO 639 language code for this {target}",
		flagLimit:                     "the limit of items to display",
		flagListId:                    "the ID of the list",
		flagLocalOnly:                 "do not federate the status beyond the local timeline(s)",
		flagMaxStatuses:               "the maximum number of statuses to display",
		flagMediaDescription:          "the description of the media attachment",
		flagMediaFile:                 "the path to the file of the media-attachment",
		flagMediaFocus:                "the focus of the media-attachment",
		flagMuteNotifications:         "mute notifications as well as posts from the {target}",
		flagMyAccount:                 "specify your account to {action}",
		flagNotBoostable:              "viewers will not be allowed to reblog (boost) the created status",
		flagNotLikeable:               "viewers will not be allowed to like (favourite) the created status",
		flagNotReplyable:              "viewers will not be allowed to reply to the created status",
		flagNotificationId:            "the ID of the notification to {action}",
		flagNotify:                    "get notifications whenever the account you want to follow posts a status",
		flagOnlyMedia:                 "only show the statuses with media attachments",
		flagOnlyPinned:                "only show the account's pinned statuses",
		flagOnlyPublic:                "only show the account's public posts",
		flagPollAllowsMultipleChoices: "allow viewers to make multiple choices in the poll",
		flagPollExpiresIn:             "the duration in which the poll is open for",
		flagPollHidesVoteCounts:       "hide the vote count until the poll is closed",
		flagPollOption:                "a poll option (use this flag multiple times to set multiple poll options)",
		flagQuery:                     "the search query string",
		flagRepliesPolicy:             "the replies policy of the {target} to {action}",
		flagResolve:                   "allow your instance to resolve the search by making calls to remote instances",
		flagRestrictToFollowing:       "restrict the search to accounts that you are following",
		flagSaveText:                  "save the text of the deleted {target}",
		flagScope:                     "the scope of access to your GoToSocial instance (e.g. read)",
		flagSensitive:                 "mark the {target} as sensitive",
		flagShowReblogs:               "show reblogs (boosts) from the account you want to follow",
		flagShowStatuses:              "view the statuses from the {target} that you are viewing",
		flagShowWhoFavourited:         "show the accounts who favourited (liked) the {target}",
		flagShowWhoReblogged:          "show the accounts who reblogged (boosted) the {target}",
		flagSkipAccountRelationship:   "don't show your relationship to the account that you are viewing",
		flagSkipUserPreferences:       "don't show your posting preferences when viewing your account information",
		flagStatusId:                  "the ID of the status",
		flagSummary:                   "the summary of the status (a.k.a the subject, spoiler text or content warning)",
		flagTagName:                   "the name of the (hash)tag",
		flagTarget:                    "the name of the target to {action}",
		flagTimelineCategory:          "the category of the timeline to {action}",
		flagTitle:                     "the title of the {target} to {action}",
		flagUrl:                       "the URL of your GoToSocial instance",
		flagVisibility:                "The visibility of the {target}",
		flagVote:                      "the option in the poll to vote for",
		flagWithoutIdleTimeout:        "{action} the {target} without an idle timeout",
	}
}

// TargetActionFlags returns a map of the flags and their descriptions
// which are associated with the action on a particular target.
func TargetActionFlags(target, action string) (map[string]string, bool) {
	flags, ok := targetActionFlagMap()[target+"-"+action]
	if !ok {
		return map[string]string{}, false
	}

	usages := flagUsageMap()

	output := make(map[string]string)

	for _, flag := range slices.All(flags) {
		output[flag] = usages[flag]
	}

	return output, true
}

// targetActionFlagMap returns a map of actions on a particular target
// and the flags associated with that action.
func targetActionFlagMap() map[string][]string {
	return map[string][]string{
		TargetAccess + "-" + ActionCreate: {
			flagScope,
			flagUrl,
		},
		TargetAccess + "-" + ActionSwitch: {},
		TargetAccess + "-" + ActionVerify: {},
		TargetAccount + "-" + ActionBlock: {
			flagAccountName,
		},
		TargetAccount + "-" + ActionFind: {
			flagQuery,
			flagLimit,
			flagRestrictToFollowing,
			flagResolve,
		},
		TargetAccount + "-" + ActionFollow: {
			flagAccountName,
			flagNotify,
			flagShowReblogs,
		},
		TargetAccount + "-" + ActionMute: {
			flagAccountName,
			flagDuration,
			flagMuteNotifications,
		},
		TargetAccount + "-" + ActionShow: {
			flagAccountName,
			flagBrowser,
			flagExcludeReblogs,
			flagExcludeReplies,
			flagMaxStatuses,
			flagMyAccount,
			flagOnlyMedia,
			flagOnlyPinned,
			flagOnlyPublic,
			flagSkipAccountRelationship,
			flagSkipUserPreferences,
			flagShowStatuses,
		},
		TargetAccount + "-" + ActionUnblock: {
			flagAccountName,
		},
		TargetAccount + "-" + ActionUnfollow: {
			flagAccountName,
		},
		TargetAccount + "-" + ActionUnmute: {
			flagAccountName,
		},
		TargetAccounts + "-" + ActionAdd:    {},
		TargetAccounts + "-" + ActionRemove: {},
		TargetBlockedAccounts + "-" + ActionShow: {
			flagLimit,
		},
		TargetBookmarks + "-" + ActionShow: {
			flagLimit,
		},
		TargetConfig + "-" + ActionCreate: {},
		TargetFavourites + "-" + ActionShow: {
			flagLimit,
		},
		TargetFollowRequest + "-" + ActionAccept: {
			flagAccountName,
		},
		TargetFollowRequest + "-" + ActionReject: {
			flagAccountName,
		},
		TargetFollowRequests + "-" + ActionShow: {
			flagLimit,
		},
		TargetFollowers + "-" + ActionShow:  {},
		TargetFollowings + "-" + ActionShow: {},
		TargetHelp + "-" + ActionShow: {
			flagAction,
			flagTarget,
		},
		TargetInstance + "-" + ActionShow: {},
		TargetList + "-" + ActionCreate: {
			flagExclusive,
			flagRepliesPolicy,
			flagTitle,
		},
		TargetList + "-" + ActionDelete: {
			flagListId,
		},
		TargetList + "-" + ActionEdit: {
			flagListId,
			flagRepliesPolicy,
			flagTitle,
		},
		TargetList + "-" + ActionShow: {
			flagListId,
		},
		TargetLists + "-" + ActionShow: {},
		TargetMedia + "-" + ActionShow: {},
		TargetMediaAttachment + "-" + ActionCreate: {
			flagMediaDescription,
			flagMediaFile,
			flagMediaFocus,
		},
		TargetMediaAttachment + "-" + ActionEdit: {
			flagAttachmentId,
			flagMediaDescription,
			flagMediaFocus,
		},
		TargetMediaAttachment + "-" + ActionShow: {
			flagAttachmentId,
		},
		TargetMutedAccounts + "-" + ActionShow: {
			flagLimit,
		},
		TargetNote + "-" + ActionAdd:    {},
		TargetNote + "-" + ActionRemove: {},
		TargetNotification + "-" + ActionShow: {
			flagNotificationId,
		},
		TargetNotifications + "-" + ActionClear: {},
		TargetNotifications + "-" + ActionShow: {
			flagLimit,
			flagExcludeNotificationType,
			flagIncludeNotificationType,
		},
		TargetServer + "-" + ActionStart: {
			flagWithoutIdleTimeout,
		},
		TargetStatus + "-" + ActionAdd: {},
		TargetStatus + "-" + ActionCreate: {
			flagAddPoll,
			flagAttachmentId,
			flagContent,
			flagContentType,
			flagInReplyTo,
			flagLanguage,
			flagLocalOnly,
			flagMediaDescription,
			flagMediaFile,
			flagMediaFocus,
			flagNotBoostable,
			flagNotLikeable,
			flagNotReplyable,
			flagPollAllowsMultipleChoices,
			flagPollExpiresIn,
			flagPollHidesVoteCounts,
			flagPollOption,
			flagSensitive,
			flagSummary,
			flagVisibility,
		},
		TargetStatus + "-" + ActionDelete: {
			flagStatusId,
			flagSaveText,
		},
		TargetStatus + "-" + ActionFavourite: {
			flagStatusId,
		},
		TargetStatus + "-" + ActionFind: {
			flagQuery,
			flagLimit,
			flagAccountName,
		},
		TargetStatus + "-" + ActionMute: {
			flagStatusId,
		},
		TargetStatus + "-" + ActionReblog: {
			flagStatusId,
		},
		TargetStatus + "-" + ActionRemove: {},
		TargetStatus + "-" + ActionShow: {
			flagStatusId,
			flagBrowser,
			flagShowWhoFavourited,
			flagShowWhoReblogged,
		},
		TargetStatus + "-" + ActionUnfavourite: {
			flagStatusId,
		},
		TargetStatus + "-" + ActionUnmute: {
			flagStatusId,
		},
		TargetStatus + "-" + ActionUnreblog: {
			flagStatusId,
		},
		TargetTag + "-" + ActionFind: {
			flagQuery,
			flagLimit,
		},
		TargetTag + "-" + ActionFollow: {
			flagTagName,
		},
		TargetTag + "-" + ActionShow: {
			flagTagName,
		},
		TargetTag + "-" + ActionUnfollow: {
			flagTagName,
		},
		TargetTags + "-" + ActionShow: {
			flagLimit,
		},
		TargetThread + "-" + ActionShow: {},
		TargetTimeline + "-" + ActionShow: {
			flagLimit,
			flagListId,
			flagTagName,
			flagTimelineCategory,
		},
		TargetVersion + "-" + ActionShow: {
			flagFull,
		},
		TargetVotes + "-" + ActionAdd: {},
	}
}
