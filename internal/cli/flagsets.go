/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/

package cli

import (
	"flag"
	"fmt"

	internalFlag "codeflow.dananglin.me.uk/apollo/enbas/internal/flag"
)

func newFlagset() *flag.FlagSet {
	flagset := flag.NewFlagSet("", flag.ExitOnError)

	// Disable the --help flag because a dedicated help system
	// will be used instead
	flagset.Usage = func() {}

	return flagset
}

// NewTopLevelFlagset returns the FlagSet for the top-level flags
func NewTopLevelFlagset(
	configDir *string,
	noColor *internalFlag.BoolPtrValue,
) *flag.FlagSet {
	flagset := newFlagset()
	flagset.StringVar(configDir, flagConfigDir, "", "")
	flagset.Var(noColor, flagNoColor, "")

	return flagset
}

func ParseAccessCreateFlags(
	scope *internalFlag.StringSliceValue,
	url *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.Var(scope, flagScope, "")
	flagset.StringVar(url, flagUrl, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccessSwitchToAccountFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountBlockFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountFindFlags(
	query *string,
	limit *int,
	restrictToFollowing *bool,
	resolve *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(query, flagQuery, "", "")
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.BoolVar(restrictToFollowing, flagRestrictToFollowing, false, "")
	flagset.BoolVar(resolve, flagResolve, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountFollowFlags(
	accountName *string,
	notify *bool,
	showReblogs *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.BoolVar(notify, flagNotify, false, "")
	flagset.BoolVar(showReblogs, flagShowReblogs, true, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountMuteFlags(
	accountName *string,
	duration *internalFlag.TimeDurationValue,
	muteNotifications *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.Var(duration, flagDuration, "")
	flagset.BoolVar(muteNotifications, flagMuteNotifications, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountShowFlags(
	accountName *string,
	browser *bool,
	excludeReblogs *bool,
	excludeReplies *bool,
	maxStatuses *int,
	myAccount *bool,
	onlyMedia *bool,
	onlyPinned *bool,
	onlyPublic *bool,
	skipAccountRelationship *bool,
	skipUserPreferences *bool,
	showStatuses *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.BoolVar(browser, flagBrowser, false, "")
	flagset.BoolVar(excludeReblogs, flagExcludeReblogs, false, "")
	flagset.BoolVar(excludeReplies, flagExcludeReplies, false, "")
	flagset.IntVar(maxStatuses, flagMaxStatuses, 20, "")
	flagset.BoolVar(myAccount, flagMyAccount, false, "")
	flagset.BoolVar(onlyMedia, flagOnlyMedia, false, "")
	flagset.BoolVar(onlyPinned, flagOnlyPinned, false, "")
	flagset.BoolVar(onlyPublic, flagOnlyPublic, false, "")
	flagset.BoolVar(skipAccountRelationship, flagSkipAccountRelationship, false, "")
	flagset.BoolVar(skipUserPreferences, flagSkipUserPreferences, false, "")
	flagset.BoolVar(showStatuses, flagShowStatuses, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountUnblockFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountUnfollowFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountUnmuteFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountsAddToListFlags(
	listId *string,
	accountName *internalFlag.StringSliceValue,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(listId, flagListId, "", "")
	flagset.Var(accountName, flagAccountName, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseAccountsRemoveFromListFlags(
	listId *string,
	accountName *internalFlag.StringSliceValue,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(listId, flagListId, "", "")
	flagset.Var(accountName, flagAccountName, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseBlockedAccountsShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseBookmarksShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFavouritesShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFollowRequestAcceptFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFollowRequestRejectFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFollowRequestsShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFollowersShowFromAccountFlags(
	accountName *string,
	limit *int,
	myAccount *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.BoolVar(myAccount, flagMyAccount, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseFollowingsShowFromAccountFlags(
	accountName *string,
	limit *int,
	myAccount *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.BoolVar(myAccount, flagMyAccount, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseHelpShowFlags(
	action *string,
	target *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(action, flagAction, "", "")
	flagset.StringVar(target, flagTarget, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseListCreateFlags(
	exclusive *bool,
	repliesPolicy *string,
	title *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.BoolVar(exclusive, flagExclusive, false, "")
	flagset.StringVar(repliesPolicy, flagRepliesPolicy, "list", "")
	flagset.StringVar(title, flagTitle, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseListDeleteFlags(
	listId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(listId, flagListId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseListEditFlags(
	listId *string,
	repliesPolicy *string,
	title *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(listId, flagListId, "", "")
	flagset.StringVar(repliesPolicy, flagRepliesPolicy, "", "")
	flagset.StringVar(title, flagTitle, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseListShowFlags(
	listId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(listId, flagListId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseMediaShowFromStatusFlags(
	statusId *string,
	attachmentId *internalFlag.StringSliceValue,
	allAudio *bool,
	allImages *bool,
	allVideos *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")
	flagset.Var(attachmentId, flagAttachmentId, "")
	flagset.BoolVar(allAudio, flagAllAudio, false, "")
	flagset.BoolVar(allImages, flagAllImages, false, "")
	flagset.BoolVar(allVideos, flagAllVideos, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseMediaAttachmentCreateFlags(
	mediaDescription *string,
	mediaFile *string,
	mediaFocus *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(mediaDescription, flagMediaDescription, "", "")
	flagset.StringVar(mediaFile, flagMediaFile, "", "")
	flagset.StringVar(mediaFocus, flagMediaFocus, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseMediaAttachmentEditFlags(
	attachmentId *string,
	mediaDescription *string,
	mediaFocus *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(attachmentId, flagAttachmentId, "", "")
	flagset.StringVar(mediaDescription, flagMediaDescription, "", "")
	flagset.StringVar(mediaFocus, flagMediaFocus, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseMediaAttachmentShowFlags(
	attachmentId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(attachmentId, flagAttachmentId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseMutedAccountsShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseNoteAddToAccountFlags(
	accountName *string,
	content *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")
	flagset.StringVar(content, flagContent, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseNoteRemoveFromAccountFlags(
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseNotificationShowFlags(
	notificationId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(notificationId, flagNotificationId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseNotificationsShowFlags(
	limit *int,
	excludeNotificationType *internalFlag.StringSliceValue,
	includeNotificationType *internalFlag.StringSliceValue,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.Var(excludeNotificationType, flagExcludeNotificationType, "")
	flagset.Var(includeNotificationType, flagIncludeNotificationType, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseServerStartFlags(
	withoutIdleTimeout *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.BoolVar(withoutIdleTimeout, flagWithoutIdleTimeout, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusAddToBookmarksFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusCreateFlags(
	addPoll *bool,
	attachmentId *internalFlag.StringSliceValue,
	content *string,
	contentType *string,
	inReplyTo *string,
	language *string,
	localOnly *bool,
	mediaDescription *internalFlag.StringSliceValue,
	mediaFile *internalFlag.StringSliceValue,
	mediaFocus *internalFlag.StringSliceValue,
	notBoostable *bool,
	notLikeable *bool,
	notReplyable *bool,
	pollAllowsMultipleChoices *bool,
	pollExpiresIn *internalFlag.TimeDurationValue,
	pollHidesVoteCounts *bool,
	pollOption *internalFlag.StringSliceValue,
	sensitive *internalFlag.BoolPtrValue,
	summary *string,
	visibility *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.BoolVar(addPoll, flagAddPoll, false, "")
	flagset.Var(attachmentId, flagAttachmentId, "")
	flagset.StringVar(content, flagContent, "", "")
	flagset.StringVar(contentType, flagContentType, "plain", "")
	flagset.StringVar(inReplyTo, flagInReplyTo, "", "")
	flagset.StringVar(language, flagLanguage, "", "")
	flagset.BoolVar(localOnly, flagLocalOnly, false, "")
	flagset.Var(mediaDescription, flagMediaDescription, "")
	flagset.Var(mediaFile, flagMediaFile, "")
	flagset.Var(mediaFocus, flagMediaFocus, "")
	flagset.BoolVar(notBoostable, flagNotBoostable, false, "")
	flagset.BoolVar(notLikeable, flagNotLikeable, false, "")
	flagset.BoolVar(notReplyable, flagNotReplyable, false, "")
	flagset.BoolVar(pollAllowsMultipleChoices, flagPollAllowsMultipleChoices, false, "")
	flagset.Var(pollExpiresIn, flagPollExpiresIn, "")
	flagset.BoolVar(pollHidesVoteCounts, flagPollHidesVoteCounts, false, "")
	flagset.Var(pollOption, flagPollOption, "")
	flagset.Var(sensitive, flagSensitive, "")
	flagset.StringVar(summary, flagSummary, "", "")
	flagset.StringVar(visibility, flagVisibility, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusDeleteFlags(
	statusId *string,
	saveText *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")
	flagset.BoolVar(saveText, flagSaveText, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusFavouriteFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusFindFlags(
	query *string,
	limit *int,
	accountName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(query, flagQuery, "", "")
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.StringVar(accountName, flagAccountName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusMuteFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusReblogFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusRemoveFromBookmarksFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusShowFlags(
	statusId *string,
	browser *bool,
	showWhoFavourited *bool,
	showWhoReblogged *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")
	flagset.BoolVar(browser, flagBrowser, false, "")
	flagset.BoolVar(showWhoFavourited, flagShowWhoFavourited, false, "")
	flagset.BoolVar(showWhoReblogged, flagShowWhoReblogged, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusUnfavouriteFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusUnmuteFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseStatusUnreblogFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTagFindFlags(
	query *string,
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(query, flagQuery, "", "")
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTagFollowFlags(
	tagName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(tagName, flagTagName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTagShowFlags(
	tagName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(tagName, flagTagName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTagUnfollowFlags(
	tagName *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(tagName, flagTagName, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTagsShowFlags(
	limit *int,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseThreadShowFromStatusFlags(
	statusId *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseTimelineShowFlags(
	limit *int,
	listId *string,
	tagName *string,
	timelineCategory *string,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.IntVar(limit, flagLimit, 20, "")
	flagset.StringVar(listId, flagListId, "", "")
	flagset.StringVar(tagName, flagTagName, "", "")
	flagset.StringVar(timelineCategory, flagTimelineCategory, "home", "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseVersionShowFlags(
	full *bool,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.BoolVar(full, flagFull, false, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}

func ParseVotesAddToStatusFlags(
	statusId *string,
	vote *internalFlag.IntSliceValue,
	flags []string,
) error {
	flagset := newFlagset()
	flagset.StringVar(statusId, flagStatusId, "", "")
	flagset.Var(vote, flagVote, "")

	if err := flagset.Parse(flags); err != nil {
		return fmt.Errorf("flag parsing error: %w", err)
	}

	return nil
}
