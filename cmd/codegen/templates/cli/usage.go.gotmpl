/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/
{{ print "" }}
package cli
{{ print "" }}
{{ print "" }}
// TopLevelFlagsUsageMap returns a map of the top-level flags and their respective descriptions.
func TopLevelFlagsUsageMap() map[string]string{
  return map[string]string{
    {{- range $name, $flag := .TopLevelFlags -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "flag%s" $var_name_part }}: {{ printf "%q" $flag.Description }},
    {{- end -}}
  {{ print "" }}
  }
}

// FlagUsageMap returns a map of the flags and their respective descriptions.
func FlagUsageMap() map[string]string{
  return map[string]string{
    {{- range $name, $desc := .Flags -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "flag%s" $var_name_part }}: {{ printf "%q" $desc }},
    {{- end -}}
  {{ print "" }}
  }
}

// TargetDesc returns the target's description.
func TargetDesc(target string) (string, bool) {
  desc, ok := targetDescMap()[target]

  return desc, ok
}

// TargetDescMap returns a map of the targets and their descriptions.
func TargetDescMap() map[string]string{
  return targetDescMap()
}

func targetDescMap() map[string]string {
  return map[string]string{
    {{- range $name, $target := .Targets -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "Target%s" $var_name_part }}: {{ printf "%q" $target.Description }},
    {{- end -}}
  {{ print "" }}
  }
}

// UsageOperation is a type for the usage documentation containing the name and
// the description of an operation.
type UsageOperation struct {
  Description string
  Flags       []string
}

// GetUsageOperations returns the set of UsageOperations for a given target.
func GetUsageOperations(target string) (map[string]UsageOperation, bool) {
  operations, ok := usageOperationMap()[target]

  return operations, ok
}

// GetUsageOperation returns the UsageOperation for a given operation.
func GetUsageOperation(target, operationName string) (UsageOperation, bool) {
  operation, ok := usageOperationMap()[target][operationName]

  return operation, ok
}

func usageOperationMap() map[string]map[string]UsageOperation{
  return map[string]map[string]UsageOperation{
    {{- range $targetName, $target := .Targets -}}
    {{ print "" }}
    {{ printf "Target%s" (snakeToCamel $targetName true) }}: {
      {{- range $actionName, $targetAction := $target.Actions -}}
      {{- if eq (len $targetAction.RelatedTargets) 0 -}}
      {{ print "" }}
      "{{ $actionName }} {{ $targetName }}": {
        Description: "{{ $targetAction.Description }}",
        Flags: []string{
          {{- range $targetAction.Flags -}}
          {{ print "" }}
          {{ printf "flag%s," (snakeToCamel .Name true) -}}
          {{- /* End ranging over the flags */ -}}
          {{- end -}}
        {{ print "" }}
        },
      },
      {{- else -}}
      {{- range $relatedTargetName, $relatedTarget := $targetAction.RelatedTargets -}}
      {{ print "" }}
      "{{ $actionName }} {{ $targetName }} {{ $targetAction.Preposition }} {{ $relatedTargetName }}": {
        Description: "{{ $relatedTarget.Description }}",
        Flags: []string{
          {{- range $relatedTarget.Flags -}}
          {{ print "" }}
          {{ printf "flag%s," (snakeToCamel .Name true) -}}
          {{- /* End ranging over the related target flags */ -}}
          {{- end -}}
        {{ print "" }}
        },
      },
      {{- /* End ranging the related targets */ -}}
      {{- end -}}
      {{- /* End if */ -}}
      {{- end -}}
      {{- /* End ranging the actions to the target */ -}}
      {{- end -}}
    {{ print "" }}
    },
    {{- /* End ranging targets */ -}}
    {{- end -}}
  {{ print "" }}
  }
}
