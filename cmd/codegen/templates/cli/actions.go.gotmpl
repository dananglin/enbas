/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/
{{ print "" }}
package cli
{{ print "" }}
{{ print "" }}
const (
  {{- range $action, $desc := .Actions -}}
  {{- $var_name_part := capitalise $action -}}
  {{ print "" }}
  {{ printf "Action%s" $var_name_part }} string = {{ printf "%q" $action }}
  {{- end -}}
{{ print "" }}
)

// ActionDesc returns the action's description.
func ActionDesc(action string) (string, bool) {
  desc, ok := actionDescMap()[action]

  return desc, ok
}

// actionDescMap returns a map of the actions and their
// respective descriptions.
func actionDescMap() map[string]string {
  return map[string]string{
    {{- range $action, $desc := .Actions -}}
    {{- $var_name_part := capitalise $action -}}
    {{ print "" }}
    {{ printf "Action%s" $var_name_part }}: {{ printf "%q" $desc }},
    {{- end -}}
  {{ print "" }}
  }
}

// ActionTargets returns a list of targets associated
// with the action.
func ActionTargets(action string) []string{
  return actionTargetsMap()[action]
}

// actionTargetsMap returns a map of the actions and the lists
// of all targets associated to those actions.
func actionTargetsMap() map[string][]string{
  return map[string][]string{
    {{- range $action, $desc := .Actions -}}
    {{ print "" }}
    {{ printf "Action%s" (capitalise $action) }}: {
      {{- range (getTargetsForAction $.Targets $action) -}}
      {{ print "" }}
      {{ printf "Target%s," (snakeToCamel . true) }}
      {{- end -}}
    {{ print "" }}
    },
    {{- end -}}
  {{ print "" }}
  }
}
