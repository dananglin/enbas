/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/
{{ print "" }}
package cli
{{ print "" }}
{{ print "" }}
import "flag"
import internalFlag "codeflow.dananglin.me.uk/apollo/enbas/internal/flag"

func newFlagset() *flag.FlagSet {
  flagset := flag.NewFlagSet("", flag.ExitOnError)

  // Disable the --help flag because a dedicated help system
  // will be used instead
  flagset.Usage = func() {}

  return flagset
}

// NewTopLevelFlagset returns the FlagSet for the top-level flags
func NewTopLevelFlagset(
  {{- range $name, $flag := .TopLevelFlags -}}
  {{ print "" }}
  {{ printf "%s *%s," (snakeToCamel $name false) $flag.Type }}
  {{- end -}}
{{ print "" }}
) *flag.FlagSet {
  flagset := newFlagset()
  {{- range $name, $flag := .TopLevelFlags -}}
  {{- if eq $flag.Type "string" -}}
  {{ print "" }}
  {{ printf "flagset.StringVar(%s, flag%s, %q, \"\")" (snakeToCamel $name false) (snakeToCamel $name true) $flag.Default }}
  {{- else -}}
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $name false) (snakeToCamel $name true) }}
  {{- end -}}
  {{- end -}}
  {{ print "" }}
  {{ print "" }}
  return flagset
}
{{ print "" }}
{{- range $targetName, $target := .Targets -}}
{{- range $actionName, $action := $target.Actions -}}
{{- if gt (len $action.Flags) 0 -}}
{{ print "" }}
func {{ printf "Parse%s%sFlags" (snakeToCamel $targetName true) (snakeToCamel $actionName true) }}(
  {{- range $flag := $action.Flags -}}
  {{ print "" }}
  {{ printf "%s *%s," (snakeToCamel $flag.Name false) $flag.Type }}
  {{- end -}}
  {{ print "" }}
  flags []string,
) error {
  flagset := newFlagset()
  {{- range $flag := $action.Flags -}}
  {{- if eq $flag.Type "string" -}}
  {{ print "" }}
  {{ printf "flagset.StringVar(%s, flag%s, %q, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) $flag.Default }}
  {{- else if eq $flag.Type "bool" -}}
  {{ print "" }}
  {{ printf "flagset.BoolVar(%s, flag%s, %s, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) $flag.Default }}
  {{- else if eq $flag.Type "int" -}}
  {{ print "" }}
  {{ printf "flagset.IntVar(%s, flag%s, %s, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) $flag.Default }}
  {{- else if eq $flag.Type "internalFlag.EnumValue" -}}
  {{ print "" }}
  {{ printf "*%s = internalFlag.NewEnumValue(" (snakeToCamel $flag.Name false) }}
  []string {
    {{- range $flag.Enum -}}
    {{ print "" }}
    {{ printf "%q," . }}
    {{- end -}}
  {{ print "" }}
  },
  "{{ $flag.Default }}",
  )
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) }}
  {{- else if eq $flag.Type "internalFlag.MultiEnumValue" -}}
  {{ print "" }}
  {{ printf "*%s = internalFlag.NewMultiEnumValue(" (snakeToCamel $flag.Name false) }}
  []string {
    {{- range $flag.Enum -}}
    {{ print "" }}
    {{ printf "%q," . }}
    {{- end -}}
  {{ print "" }}
  },
  )
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) }}
  {{- else -}}
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $flag.Name false) (snakeToCamel $flag.Name true) }}
  {{- end -}}
  {{- end -}}
  {{ print "" }}
  {{ print "" }}
  if err := flagset.Parse(flags); err != nil {
    return fmt.Errorf("flag parsing error: %w", err)
  }

  return nil
}
{{ print "" }}
{{- end -}}
{{- if gt (len $action.RelatedTargets) 0 -}}
{{- range $relatedTargetName, $relatedTarget := $action.RelatedTargets -}}
{{- if gt (len $relatedTarget.Flags) 0 -}}
{{ print "" }}
func {{ printf "Parse%s%s%s%sFlags" (snakeToCamel $targetName true) (snakeToCamel $actionName true) (capitalise $action.Preposition) (snakeToCamel $relatedTargetName true)}}(
  {{- range $relatedTargetFlag := $relatedTarget.Flags -}}
  {{ print "" }}
  {{ printf "%s *%s," (snakeToCamel $relatedTargetFlag.Name false) $relatedTargetFlag.Type }}
  {{- end -}}
  {{ print "" }}
  flags []string,
) error {
  flagset := newFlagset()
  {{- range $relatedTargetFlag := $relatedTarget.Flags -}}
  {{- if eq $relatedTargetFlag.Type "string" -}}
  {{ print "" }}
  {{ printf "flagset.StringVar(%s, flag%s, %q, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) $relatedTargetFlag.Default }}
  {{- else if eq $relatedTargetFlag.Type "bool" -}}
  {{ print "" }}
  {{ printf "flagset.BoolVar(%s, flag%s, %s, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) $relatedTargetFlag.Default }}
  {{- else if eq $relatedTargetFlag.Type "int" -}}
  {{ print "" }}
  {{ printf "flagset.IntVar(%s, flag%s, %s, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) $relatedTargetFlag.Default }}
  {{- else if eq $relatedTargetFlag.Type "internalFlag.EnumValue" -}}
  {{ print "" }}
  {{ printf "*%s = internalFlag.NewEnumValue(" (snakeToCamel $relatedTargetFlag.Name false) }}
  []string {
    {{- range $relatedTargetFlag.Enum -}}
    {{ print "" }}
    {{ printf "%q," . }}
    {{- end -}}
  {{ print "" }}
  },
  "{{ $relatedTargetFlag.Default }}",
  )
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) }}
  {{- else if eq $relatedTargetFlag.Type "internalFlag.MultiEnumValue" -}}
  {{ print "" }}
  {{ printf "*%s = internalFlag.NewMultiEnumValue(" (snakeToCamel $relatedTargetFlag.Name false) }}
  []string {
    {{- range $relatedTargetFlag.Enum -}}
    {{ print "" }}
    {{ printf "%q," . }}
    {{- end -}}
  {{ print "" }}
  },
  )
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) }}
  {{- else -}}
  {{ print "" }}
  {{ printf "flagset.Var(%s, flag%s, \"\")" (snakeToCamel $relatedTargetFlag.Name false) (snakeToCamel $relatedTargetFlag.Name true) }}
  {{- end -}}
  {{- end -}}
  {{ print "" }}
  {{ print "" }}
  if err := flagset.Parse(flags); err != nil {
    return fmt.Errorf("flag parsing error: %w", err)
  }

  return nil
}
{{ print "" }}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
