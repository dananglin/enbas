/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/
{{ print "" }}
package cli
{{ print "" }}
{{ print "" }}
import "slices"
{{ print "" }}
{{ print "" }}
const (
  {{- range $name, $flag := .TopLevelFlags -}}
  {{- $var_name_part := snakeToCamel $name true -}}
  {{ print "" }}
  {{ printf "flag%s" $var_name_part }} string = {{ printf "%q" $name }}
  {{- end -}}
{{ print "" }}
)

// TopLevelFlagsUsageMap returns a map of the top-level flags
// and their respective descriptions.
func TopLevelFlagsUsageMap() map[string]string{
  return map[string]string{
    {{- range $name, $flag := .TopLevelFlags -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "flag%s" $var_name_part }}: {{ printf "%q" $flag.Description }},
    {{- end -}}
  {{ print "" }}
  }
}

const (
  {{- range $name, $desc := .Flags -}}
  {{- $var_name_part := snakeToCamel $name true -}}
  {{ print "" }}
  {{ printf "flag%s" $var_name_part }} string = {{ printf "%q" $name }}
  {{- end -}}
{{ print "" }}
)

// flagUsageMap returns a map of the flags
// and their respective descriptions.
func flagUsageMap() map[string]string{
  return map[string]string{
    {{- range $name, $desc := .Flags -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "flag%s" $var_name_part }}: {{ printf "%q" $desc }},
    {{- end -}}
  {{ print "" }}
  }
}

// TargetActionFlags returns a map of the flags and their descriptions
// which are associated with the action on a particular target.
func TargetActionFlags(target, action string) (map[string]string, bool) {
  flags, ok := targetActionFlagMap()[target+"-"+action]
  if !ok {
    return map[string]string{}, false
  }

  usages := flagUsageMap()

  output := make(map[string]string)

  for _, flag := range slices.All(flags) {
    output[flag] = usages[flag]
  }

  return output, true
}

// targetActionFlagMap returns a map of actions on a particular target
// and the flags associated with that action.
func targetActionFlagMap() map[string][]string{
  return map[string][]string{
  {{- range $targetName, $target := .Targets -}}
  {{- $capTargetName := snakeToCamel $targetName true -}}
  {{- range $actionName, $action := $target.Actions -}}
  {{- $capActionName := capitalise $actionName }}
  {{ printf "Target%s" $capTargetName }} + "-" + {{ printf "Action%s" $capActionName }}: {
    {{- range $action.Flags -}}
    {{- $var_name_part := snakeToCamel .Name true -}}
    {{ print "" }}
    {{ printf "flag%s," $var_name_part }}
    {{- end -}}
  {{ print "" }}
  },
  {{- end -}}
  {{- end -}}
  {{ print "" }}
  }
}
