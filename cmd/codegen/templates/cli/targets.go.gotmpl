/*
   This file is generated by the code generator.
   DO NOT EDIT.
*/
{{ print "" }}
package cli
{{ print "" }}
{{ print "" }}
import "slices"
{{ print "" }}
{{ print "" }}
const (
  {{- range $name, $target := .Targets -}}
  {{- $var_name_part := snakeToCamel $name true -}}
  {{ print "" }}
  {{ printf "Target%s" $var_name_part }} string = {{ printf "%q" $name }}
  {{- end -}}
{{ print "" }}
)

// TargetDesc returns the target's description.
func TargetDesc(target string) (string, bool) {
  desc, ok := targetDescMap()[target]

  return desc, ok
}

// targetDescMap returns a map of the targets and their
// descriptions.
func TargetDescMap() map[string]string{
  return targetDescMap()
}

func targetDescMap() map[string]string {
  return map[string]string{
    {{- range $name, $target := .Targets -}}
    {{- $var_name_part := snakeToCamel $name true -}}
    {{ print "" }}
    {{ printf "Target%s" $var_name_part }}: {{ printf "%q" $target.Description }},
    {{- end -}}
  {{ print "" }}
  }
}

// TargetActions returns a map of the actions and the
// descriptions of their associated targets.
func TargetActions(target string) map[string]string {
  actions := targetActionsMap()[target]
  descriptions := actionDescMap()

  output := make(map[string]string)

  for _, action := range slices.All(actions) {
    output[action] = descriptions[action]
  }

  return output
}

// targetActionsMap returns a map of the targets and the
// lists of all actions associated with those targets.
func targetActionsMap() map[string][]string {
  return map[string][]string{
    {{- range $targetName, $target := .Targets -}}
    {{- $var_name_part := snakeToCamel $targetName true -}}
    {{ print "" }}
    {{ printf "Target%s" $var_name_part }}: {
      {{- range $actionName, $action := $target.Actions -}}
      {{ print "" }}
      {{ printf "Action%s," (capitalise $actionName) }}
      {{- end -}}
    {{ print "" }}
    },
    {{- end -}}
  {{ print "" }}
  }
}

// TargetActionPreposition returns the preposition word used to
// relate the focused target to another target.
func TargetActionPreposition(target, action string) string {
  return targetActionPrepositionMap()[target + "-" + action]
}

func targetActionPrepositionMap() map[string]string{
  return map[string]string{
    {{- range $targetName, $target := .Targets -}}
    {{- range $actionName, $action := $target.Actions -}}
    {{- if ne $action.Preposition "" -}}
    {{ print "" }}
    {{ printf "Target%s" (snakeToCamel $targetName true) }} + "-" + {{ printf "Action%s" (capitalise $actionName) }}: {{ printf "%q," $action.Preposition }}
    {{- end -}}
    {{- end -}}
    {{- end -}}
  {{ print "" }}
  }
}
